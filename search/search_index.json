{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview An easy to use scripting API for Minecraft. Made by Zarzel and currently only in his client: astolfo.lgbt . If you don't already understand how Minecraft works, I suggest you look through MCP a little bit first so you can understand the structure of ZarScript. Script structure All scripts must have 2 global variables named 'scriptName' and 'scriptDescription. Your modules are defined as functions and you must register and unregister an instance of them in 'onEnable' and 'onDisable'. All modules must have the function 'getName'. var scriptName = \"My Script\" ; var scriptDescription = \"Some description here\" ; function Module () { this . getName = function () { return \"My script\" ; }; } var module = new Module (); this . onEnable = function () { moduleManager . registerModule ( module ); } this . onDisable = function () { moduleManager . unregisterModule ( module ); } Defining event callbacks Some events allow you to return an object to make changes to the event context. A full list of events can be found here function Module () { this . getName = function () { return \"My script\" ; }; this . onRender2D = function ( width , height , partialTicks ) { } this . onPreMotion = function ( posX , posY , posZ , yaw , pitch , onGround ) { return [ posX , posY , posZ , yaw , pitch , onGround ] } } Code snippets Visual studio code snippets for ZarScript can be downloaded here Example scripts For some example scripts made by the beta testers, check out this page . Obviously, these don't show everything you can do with ZarScript but they will give you a general idea of what you can and can't make.","title":"Home"},{"location":"#overview","text":"An easy to use scripting API for Minecraft. Made by Zarzel and currently only in his client: astolfo.lgbt . If you don't already understand how Minecraft works, I suggest you look through MCP a little bit first so you can understand the structure of ZarScript.","title":"Overview"},{"location":"#script-structure","text":"All scripts must have 2 global variables named 'scriptName' and 'scriptDescription. Your modules are defined as functions and you must register and unregister an instance of them in 'onEnable' and 'onDisable'. All modules must have the function 'getName'. var scriptName = \"My Script\" ; var scriptDescription = \"Some description here\" ; function Module () { this . getName = function () { return \"My script\" ; }; } var module = new Module (); this . onEnable = function () { moduleManager . registerModule ( module ); } this . onDisable = function () { moduleManager . unregisterModule ( module ); }","title":"Script structure"},{"location":"#defining-event-callbacks","text":"Some events allow you to return an object to make changes to the event context. A full list of events can be found here function Module () { this . getName = function () { return \"My script\" ; }; this . onRender2D = function ( width , height , partialTicks ) { } this . onPreMotion = function ( posX , posY , posZ , yaw , pitch , onGround ) { return [ posX , posY , posZ , yaw , pitch , onGround ] } }","title":"Defining event callbacks"},{"location":"#code-snippets","text":"Visual studio code snippets for ZarScript can be downloaded here","title":"Code snippets"},{"location":"#example-scripts","text":"For some example scripts made by the beta testers, check out this page . Obviously, these don't show everything you can do with ZarScript but they will give you a general idea of what you can and can't make.","title":"Example scripts"},{"location":"dependency/","text":"Dependencies For some of the more commonly used functions, you may want to use a dependency in your script. This can be done by including any .jslib file with: var dependencies = \"scriptname1,scriptname2,...\" Creating your own dependencies To create your own dependency all you need to do is save your script as a .jslib instead of a .js file. You stil need to have scriptName and scriptDescription though. The scriptName is what will be used when other scripts include your dependency. var scriptName = \"My dependency\" var scriptDescription = \"Add two numbers!\" function someFunction ( someParam , someParam2 ) return someParam + someParam2 ; } var scriptName = \"My script\" var scriptDescription = \"Some script\" var dependencies = \"My dependency\" function Module () { someFunction ( 1 , 2 ); } var module = new Module (); this . onEnable = function () { moduleManager . registerModule ( module ); } this . onDisable = function () { moduleManager . unregisterModule ( module ); } Featured dependencies There are currently no featured dependencies. If you would like yours added here, please contact anthonyj on the forums.","title":"Dependencies"},{"location":"dependency/#dependencies","text":"For some of the more commonly used functions, you may want to use a dependency in your script. This can be done by including any .jslib file with: var dependencies = \"scriptname1,scriptname2,...\"","title":"Dependencies"},{"location":"dependency/#creating-your-own-dependencies","text":"To create your own dependency all you need to do is save your script as a .jslib instead of a .js file. You stil need to have scriptName and scriptDescription though. The scriptName is what will be used when other scripts include your dependency. var scriptName = \"My dependency\" var scriptDescription = \"Add two numbers!\" function someFunction ( someParam , someParam2 ) return someParam + someParam2 ; } var scriptName = \"My script\" var scriptDescription = \"Some script\" var dependencies = \"My dependency\" function Module () { someFunction ( 1 , 2 ); } var module = new Module (); this . onEnable = function () { moduleManager . registerModule ( module ); } this . onDisable = function () { moduleManager . unregisterModule ( module ); }","title":"Creating your own dependencies"},{"location":"dependency/#featured-dependencies","text":"There are currently no featured dependencies. If you would like yours added here, please contact anthonyj on the forums.","title":"Featured dependencies"},{"location":"entity/","text":"Prefix .* Examples Loop through entity list let entities = entity . getEntities (); for ( var i = 0 ; i < entities . length ; i ++ ) { let entityId = entities [ index ]; //Use functions documented below } Functions getHealth(id) Returns the players health getHurtTime(id) Returns the hurt time of an entity getBoundingBox(id) Returns the bounding box of an entity Return type is a double array which contains (in order) minX, minY, minZ, maxX, maxY, maxZ getPosition(id) Returns the position of an entity Return type is a double array which contains (in order) x, y, z getAngles(id) Returns the yaw and pitch of an entity. Return type is a double array which contains (in order) yaw, pitch getDisplayName() Returns the display name of an entity getName() Returns the name of an entity isPlayer() Returns whether or not an entity is a player getHeldItemName() Returns the name of an entities held item","title":"Entity"},{"location":"entity/#prefix","text":".*","title":"Prefix"},{"location":"entity/#examples","text":"","title":"Examples"},{"location":"entity/#loop-through-entity-list","text":"let entities = entity . getEntities (); for ( var i = 0 ; i < entities . length ; i ++ ) { let entityId = entities [ index ]; //Use functions documented below }","title":"Loop through entity list"},{"location":"entity/#functions","text":"","title":"Functions"},{"location":"entity/#gethealthid","text":"Returns the players health","title":"getHealth(id)"},{"location":"entity/#gethurttimeid","text":"Returns the hurt time of an entity","title":"getHurtTime(id)"},{"location":"entity/#getboundingboxid","text":"Returns the bounding box of an entity Return type is a double array which contains (in order) minX, minY, minZ, maxX, maxY, maxZ","title":"getBoundingBox(id)"},{"location":"entity/#getpositionid","text":"Returns the position of an entity Return type is a double array which contains (in order) x, y, z","title":"getPosition(id)"},{"location":"entity/#getanglesid","text":"Returns the yaw and pitch of an entity. Return type is a double array which contains (in order) yaw, pitch","title":"getAngles(id)"},{"location":"entity/#getdisplayname","text":"Returns the display name of an entity","title":"getDisplayName()"},{"location":"entity/#getname","text":"Returns the name of an entity","title":"getName()"},{"location":"entity/#isplayer","text":"Returns whether or not an entity is a player","title":"isPlayer()"},{"location":"entity/#gethelditemname","text":"Returns the name of an entities held item","title":"getHeldItemName()"},{"location":"events/","text":"onPlayerMove(x, y, z) Called when the local player is moved onPlayerCreate Called when the world is loaded onPreUpdate Called at the beginning of the local player update method onPostUpdate Called at the end of the local player update method onPreMotion(x, y, z, yaw, pitch, onGround) Called at the beginning of the local player update method. Use this pre event if you want to change what variables are networked to the server return [x, y, z, yaw, pitch, onGround] onSendPacket(id, data) Called when a packet is sent. Not all packets will contain data return [cancelled] onRender2D(width, height, partialTicks) Called when the in-game overlay is rendering onRender3D(partialTicks) Called when the world is rendering","title":"Events"},{"location":"events/#onplayermovex-y-z","text":"Called when the local player is moved","title":"onPlayerMove(x, y, z)"},{"location":"events/#onplayercreate","text":"Called when the world is loaded","title":"onPlayerCreate"},{"location":"events/#onpreupdate","text":"Called at the beginning of the local player update method","title":"onPreUpdate"},{"location":"events/#onpostupdate","text":"Called at the end of the local player update method","title":"onPostUpdate"},{"location":"events/#onpremotionx-y-z-yaw-pitch-onground","text":"Called at the beginning of the local player update method. Use this pre event if you want to change what variables are networked to the server return [x, y, z, yaw, pitch, onGround]","title":"onPreMotion(x, y, z, yaw, pitch, onGround)"},{"location":"events/#onsendpacketid-data","text":"Called when a packet is sent. Not all packets will contain data return [cancelled]","title":"onSendPacket(id, data)"},{"location":"events/#onrender2dwidth-height-partialticks","text":"Called when the in-game overlay is rendering","title":"onRender2D(width, height, partialTicks)"},{"location":"events/#onrender3dpartialticks","text":"Called when the world is rendering","title":"onRender3D(partialTicks)"},{"location":"examples/","text":"Example Scripts Chat spammer var scriptName = \"Chat Spammer\" ; var scriptDescription = \"Spams the chat with a pre-defined message.\" ; function ChatSpammer () { var message = \"u guys suck at this game lol\" ; var delayTicks = 40 ; this . getName = function () { return \"Chat Spammer\" ; }; this . onRender2D = function ( width , height , partialTicks ) { var ticksRemaining = localPlayer . getTicksExisted () % 40 ; render . drawString ( ticksRemaining , 2 , 15 , - 1 ); } this . onPreMotion = function ( posX , posY , posZ , yaw , pitch , onGround ) { if ( localPlayer . getTicksExisted () % delayTicks == 0 ) localPlayer . sendMessage ( message ); return [ posX , posY , posZ , yaw , pitch , onGround ] } } var spammerModule = new ChatSpammer (); this . onEnable = function () { moduleManager . registerModule ( spammerModule ); } this . onDisable = function () { moduleManager . unregisterModule ( spammerModule ); } Look notifier var scriptName = \"Look notifier\" ; var scriptDescription = \"Tells you whos looking at you.\" ; getAngleDistanceToPlayer = function ( localX , localY , localZ , id ) { var positions = world . getEntityPosition ( id ) var rotations = world . getEntityRotations ( id ) var x = localX - positions [ 0 ]; var y = localY - positions [ 1 ]; var z = localZ - positions [ 2 ]; var d1 = ( positions [ 1 ] + 1.62 ) - ( localY + 1.62 ); //hardcoded values var d3 = Math . sqrt ( x * x + z * z ); var f = (( Math . atan2 ( z , x ) * 180 ) / Math . PI ) - 90 ; var f1 = ( - (( Math . atan2 ( d1 , d3 ) * 180 ) / Math . PI )); return getAngleDistance ( f , rotations [ 1 ]) + getAngleDistance ( f1 , rotations [ 0 ]); }; getPercent = function ( angle ) { return ( 360 / angle ) * 4 ; } getAngleDistance = function ( a , b ){ var d = Math . abs ( a - b ) % 360 ; return ( d > 180 ? 360 - d : d ); } function ExampleModule () { var toDraw = \"Nobody\" ; this . getName = function () { return \"Look notifier\" ; }; this . onRender2D = function ( width , height , partialTicks ) { render . drawString ( toDraw , 150 , 50 , - 1 ) } this . onPreMotion = function ( posX , posY , posZ , yaw , pitch , onGround ) { var daEntities = world . getWorldEntities (); toDraw = \"\" var lowestAngle = 999 ; var entityName = \"\" ; var i ; for ( i = 0 ; i < daEntities . length ; i ++ ) { if ( world . isPlayer ( daEntities [ i ])) { var angleDist = getAngleDistanceToPlayer ( posX , posY , posZ , daEntities [ i ]); if ( angleDist < lowestAngle ) { lowestAngle = angleDist ; entityName = world . getEntityName ( daEntities [ i ]); } } } if ( lowestAngle < 30 && entityName != \"\" ) { toDraw = entityName + \" is looking at you!\" + Math . floor ( getPercent ( lowestAngle )) + \"%\" ; } return [ posX , posY , posZ , yaw , pitch , onGround ] } } var exampleModule = new ExampleModule (); this . onEnable = function () { moduleManager . registerModule ( exampleModule ); } this . onDisable = function () { moduleManager . unregisterModule ( exampleModule ); }","title":"Examples"},{"location":"examples/#example-scripts","text":"","title":"Example Scripts"},{"location":"examples/#chat-spammer","text":"var scriptName = \"Chat Spammer\" ; var scriptDescription = \"Spams the chat with a pre-defined message.\" ; function ChatSpammer () { var message = \"u guys suck at this game lol\" ; var delayTicks = 40 ; this . getName = function () { return \"Chat Spammer\" ; }; this . onRender2D = function ( width , height , partialTicks ) { var ticksRemaining = localPlayer . getTicksExisted () % 40 ; render . drawString ( ticksRemaining , 2 , 15 , - 1 ); } this . onPreMotion = function ( posX , posY , posZ , yaw , pitch , onGround ) { if ( localPlayer . getTicksExisted () % delayTicks == 0 ) localPlayer . sendMessage ( message ); return [ posX , posY , posZ , yaw , pitch , onGround ] } } var spammerModule = new ChatSpammer (); this . onEnable = function () { moduleManager . registerModule ( spammerModule ); } this . onDisable = function () { moduleManager . unregisterModule ( spammerModule ); }","title":"Chat spammer"},{"location":"examples/#look-notifier","text":"var scriptName = \"Look notifier\" ; var scriptDescription = \"Tells you whos looking at you.\" ; getAngleDistanceToPlayer = function ( localX , localY , localZ , id ) { var positions = world . getEntityPosition ( id ) var rotations = world . getEntityRotations ( id ) var x = localX - positions [ 0 ]; var y = localY - positions [ 1 ]; var z = localZ - positions [ 2 ]; var d1 = ( positions [ 1 ] + 1.62 ) - ( localY + 1.62 ); //hardcoded values var d3 = Math . sqrt ( x * x + z * z ); var f = (( Math . atan2 ( z , x ) * 180 ) / Math . PI ) - 90 ; var f1 = ( - (( Math . atan2 ( d1 , d3 ) * 180 ) / Math . PI )); return getAngleDistance ( f , rotations [ 1 ]) + getAngleDistance ( f1 , rotations [ 0 ]); }; getPercent = function ( angle ) { return ( 360 / angle ) * 4 ; } getAngleDistance = function ( a , b ){ var d = Math . abs ( a - b ) % 360 ; return ( d > 180 ? 360 - d : d ); } function ExampleModule () { var toDraw = \"Nobody\" ; this . getName = function () { return \"Look notifier\" ; }; this . onRender2D = function ( width , height , partialTicks ) { render . drawString ( toDraw , 150 , 50 , - 1 ) } this . onPreMotion = function ( posX , posY , posZ , yaw , pitch , onGround ) { var daEntities = world . getWorldEntities (); toDraw = \"\" var lowestAngle = 999 ; var entityName = \"\" ; var i ; for ( i = 0 ; i < daEntities . length ; i ++ ) { if ( world . isPlayer ( daEntities [ i ])) { var angleDist = getAngleDistanceToPlayer ( posX , posY , posZ , daEntities [ i ]); if ( angleDist < lowestAngle ) { lowestAngle = angleDist ; entityName = world . getEntityName ( daEntities [ i ]); } } } if ( lowestAngle < 30 && entityName != \"\" ) { toDraw = entityName + \" is looking at you!\" + Math . floor ( getPercent ( lowestAngle )) + \"%\" ; } return [ posX , posY , posZ , yaw , pitch , onGround ] } } var exampleModule = new ExampleModule (); this . onEnable = function () { moduleManager . registerModule ( exampleModule ); } this . onDisable = function () { moduleManager . unregisterModule ( exampleModule ); }","title":"Look notifier"},{"location":"localplayer/","text":"Prefix localPlayer.* Functions getMoveInput() Returns the players moveForward and moveStrafing as an array ([0] and [1] to access it) getName() Returns the players ingame name getHWID() Returns the HWID (protection purposes) getId() Returns the players UUID getPosition() Returns the players position (x, y, z) setPosition(x, y, z) Sets the players position getDistanceToEntity(id) Gets the distance between the local player and the entity with id getAngles() Returns the players current angles (yaw, pitch) setAngles(yaw, pitch) Sets the players angles (yaw, pitch) setPosition(x, y, z) Sets the players x, y and z coordinates setMotionX(motionX) Sets the players motion on the x axis setMotionY(motionY) Sets the players motion on the y axis setMotionZ(motionZ) Sets the players motiono on the z axis setSpeed(speed) Sets the players speed jump() Makes the player jump isOnGround() Returns whether or not the player is on the ground isOnLadder() Returns whether or not the player is climbing a ladder or vines getTicksExisted() Returns the amount of ticks the player entity has existed sendMessage(message) Sends a message as the player getHurtTime() Returns the players hurt ticks getKillAuraTarget() Returns the current kill aura target. -1 if null getHotbarSlot() Returns the players active hotbar slot setHotbarSlot(slot) Sets the players active hotbar slot isUsingItem() Returns whether or not the player is using their held item sendPacket(id, data) Sends a packet to the server. For more information on how packets work, check out this","title":"Local Player"},{"location":"localplayer/#prefix","text":"localPlayer.*","title":"Prefix"},{"location":"localplayer/#functions","text":"","title":"Functions"},{"location":"localplayer/#getmoveinput","text":"Returns the players moveForward and moveStrafing as an array ([0] and [1] to access it)","title":"getMoveInput()"},{"location":"localplayer/#getname","text":"Returns the players ingame name","title":"getName()"},{"location":"localplayer/#gethwid","text":"Returns the HWID (protection purposes)","title":"getHWID()"},{"location":"localplayer/#getid","text":"Returns the players UUID","title":"getId()"},{"location":"localplayer/#getposition","text":"Returns the players position (x, y, z)","title":"getPosition()"},{"location":"localplayer/#setpositionx-y-z","text":"Sets the players position","title":"setPosition(x, y, z)"},{"location":"localplayer/#getdistancetoentityid","text":"Gets the distance between the local player and the entity with id","title":"getDistanceToEntity(id)"},{"location":"localplayer/#getangles","text":"Returns the players current angles (yaw, pitch)","title":"getAngles()"},{"location":"localplayer/#setanglesyaw-pitch","text":"Sets the players angles (yaw, pitch)","title":"setAngles(yaw, pitch)"},{"location":"localplayer/#setpositionx-y-z_1","text":"Sets the players x, y and z coordinates","title":"setPosition(x, y, z)"},{"location":"localplayer/#setmotionxmotionx","text":"Sets the players motion on the x axis","title":"setMotionX(motionX)"},{"location":"localplayer/#setmotionymotiony","text":"Sets the players motion on the y axis","title":"setMotionY(motionY)"},{"location":"localplayer/#setmotionzmotionz","text":"Sets the players motiono on the z axis","title":"setMotionZ(motionZ)"},{"location":"localplayer/#setspeedspeed","text":"Sets the players speed","title":"setSpeed(speed)"},{"location":"localplayer/#jump","text":"Makes the player jump","title":"jump()"},{"location":"localplayer/#isonground","text":"Returns whether or not the player is on the ground","title":"isOnGround()"},{"location":"localplayer/#isonladder","text":"Returns whether or not the player is climbing a ladder or vines","title":"isOnLadder()"},{"location":"localplayer/#getticksexisted","text":"Returns the amount of ticks the player entity has existed","title":"getTicksExisted()"},{"location":"localplayer/#sendmessagemessage","text":"Sends a message as the player","title":"sendMessage(message)"},{"location":"localplayer/#gethurttime","text":"Returns the players hurt ticks","title":"getHurtTime()"},{"location":"localplayer/#getkillauratarget","text":"Returns the current kill aura target. -1 if null","title":"getKillAuraTarget()"},{"location":"localplayer/#gethotbarslot","text":"Returns the players active hotbar slot","title":"getHotbarSlot()"},{"location":"localplayer/#sethotbarslotslot","text":"Sets the players active hotbar slot","title":"setHotbarSlot(slot)"},{"location":"localplayer/#isusingitem","text":"Returns whether or not the player is using their held item","title":"isUsingItem()"},{"location":"localplayer/#sendpacketid-data","text":"Sends a packet to the server. For more information on how packets work, check out this","title":"sendPacket(id, data)"},{"location":"modules/","text":"Prefix moduleManager.* Functions registerModule(instance) Registers a module and adds it to the gui. isVisible() Returns if the module is visible unregisterModule(instance) Unregisters a module and removes it from the gui. registerBoolean(moduleName, optionName, description, defaultValue) Registers a boolean option to the specified module moduleName - Name of the module it will be registered to (must be a script-added module) optionName - Name of the boolean option description - A short explanation of what this option does defaultValue - True/false getBoolean(optionName) Returns the value of the specified boolean option. Only works for booleans registered by scripts isModuleActive(moduleName) Returns the state of the specified module","title":"Module Manager"},{"location":"modules/#prefix","text":"moduleManager.*","title":"Prefix"},{"location":"modules/#functions","text":"","title":"Functions"},{"location":"modules/#registermoduleinstance","text":"Registers a module and adds it to the gui.","title":"registerModule(instance)"},{"location":"modules/#isvisible","text":"Returns if the module is visible","title":"isVisible()"},{"location":"modules/#unregistermoduleinstance","text":"Unregisters a module and removes it from the gui.","title":"unregisterModule(instance)"},{"location":"modules/#registerbooleanmodulename-optionname-description-defaultvalue","text":"Registers a boolean option to the specified module moduleName - Name of the module it will be registered to (must be a script-added module) optionName - Name of the boolean option description - A short explanation of what this option does defaultValue - True/false","title":"registerBoolean(moduleName, optionName, description, defaultValue)"},{"location":"modules/#getbooleanoptionname","text":"Returns the value of the specified boolean option. Only works for booleans registered by scripts","title":"getBoolean(optionName)"},{"location":"modules/#ismoduleactivemodulename","text":"Returns the state of the specified module","title":"isModuleActive(moduleName)"},{"location":"packets/","text":"All packets can be caught with the sendPacket event, but only some of them can be sent using the localPlayer . sendPacket(id, data) function. Sendable packets PacketPlayer , PacketSwing , PacketEntityAction , Packets PacketPlayer Id : 9 Data : - onGround - yaw - pitch - x - y - z Possible data combinations : - onGround - x , y , z , onGround - yaw , pitch , onGround - x , y , z , yaw , pitch , onGround PacketEntityAction Id : 1 Data : - action : - START_SNEAKING ( 0 ) - STOP_SNEAKING ( 1 ) - START_SPRINTING ( 3 ) - STOP_SPRINTING ( 4 ) - RIDING_JUMP ( 5 ) - OPEN_INVENTORY ( 6 ) PacketSwing Id : 0 PacketUseEntity Id : 8 PacketChatMessage Id : 7 Data : - message","title":"Packets"},{"location":"packets/#sendable-packets","text":"PacketPlayer , PacketSwing , PacketEntityAction ,","title":"Sendable packets"},{"location":"packets/#packets","text":"","title":"Packets"},{"location":"packets/#packetplayer","text":"Id : 9 Data : - onGround - yaw - pitch - x - y - z Possible data combinations : - onGround - x , y , z , onGround - yaw , pitch , onGround - x , y , z , yaw , pitch , onGround","title":"PacketPlayer"},{"location":"packets/#packetentityaction","text":"Id : 1 Data : - action : - START_SNEAKING ( 0 ) - STOP_SNEAKING ( 1 ) - START_SPRINTING ( 3 ) - STOP_SPRINTING ( 4 ) - RIDING_JUMP ( 5 ) - OPEN_INVENTORY ( 6 )","title":"PacketEntityAction"},{"location":"packets/#packetswing","text":"Id : 0","title":"PacketSwing"},{"location":"packets/#packetuseentity","text":"Id : 8","title":"PacketUseEntity"},{"location":"packets/#packetchatmessage","text":"Id : 7 Data : - message","title":"PacketChatMessage"},{"location":"render/","text":"Prefix render.* Functions drawRect(x, y, x1, y1, r, g, b, a) Draws a rectangle on the screen drawString(text, x, y, hexColor) Draws text on the screen getStringWidth(text) Returns the string width of inputed string","title":"Render"},{"location":"render/#prefix","text":"render.*","title":"Prefix"},{"location":"render/#functions","text":"","title":"Functions"},{"location":"render/#drawrectx-y-x1-y1-r-g-b-a","text":"Draws a rectangle on the screen","title":"drawRect(x, y, x1, y1, r, g, b, a)"},{"location":"render/#drawstringtext-x-y-hexcolor","text":"Draws text on the screen","title":"drawString(text, x, y, hexColor)"},{"location":"render/#getstringwidthtext","text":"Returns the string width of inputed string","title":"getStringWidth(text)"},{"location":"troubleshooting/","text":"Quick notes Firstly, for some of you more experienced JavaScript programmers, ZarScript is meant to parse an older version of JavaScript. This means that things like \"let var1 = 0\" will not work. Instead you should use \"var var1 = 0\". I would also like to point out that, for the readability of your code, you shouldn't stray too far from the structure of the examples we provide. For example, while these two code blocks technically do the same thing, you should try to stick to the first example to avoid confusing anyone that may be trying to help you. function Module () { this . getName = function () { return \"module name\" ; } } class Module { constructor ( brand ) { this . getName = function () { return \"module name\" ; } } }","title":"Notes"},{"location":"troubleshooting/#quick-notes","text":"Firstly, for some of you more experienced JavaScript programmers, ZarScript is meant to parse an older version of JavaScript. This means that things like \"let var1 = 0\" will not work. Instead you should use \"var var1 = 0\". I would also like to point out that, for the readability of your code, you shouldn't stray too far from the structure of the examples we provide. For example, while these two code blocks technically do the same thing, you should try to stick to the first example to avoid confusing anyone that may be trying to help you. function Module () { this . getName = function () { return \"module name\" ; } } class Module { constructor ( brand ) { this . getName = function () { return \"module name\" ; } } }","title":"Quick notes"},{"location":"world/","text":"Prefix world.* Functions setTimer(timer) Sets the game timer speed getTimer() Returns the players timer speed world.getBlock(x, y, z) Returns the block name at the coordinates specified.","title":"World"},{"location":"world/#prefix","text":"world.*","title":"Prefix"},{"location":"world/#functions","text":"","title":"Functions"},{"location":"world/#settimertimer","text":"Sets the game timer speed","title":"setTimer(timer)"},{"location":"world/#gettimer","text":"Returns the players timer speed","title":"getTimer()"},{"location":"world/#worldgetblockx-y-z","text":"Returns the block name at the coordinates specified.","title":"world.getBlock(x, y, z)"}]}