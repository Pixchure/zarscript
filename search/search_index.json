{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview An easy to use scripting API for Minecraft. Made by Zarzel and currently only in the beta builds of his client: astolfo.lgbt . If you don't already understand how Minecraft works, I suggest you look through MCP a little bit first so you can understand the structure of ZarScript. Script structure All scripts must have 2 global variables named 'scriptName' and 'scriptDescription. Your modules are defined as functions and you must register and unregister an instance of them in 'onEnable' and 'onDisable'. All modules must have the function 'getName'. var scriptName = \"My Script\" ; var scriptDescription = \"Some description here\" ; function Module () { this . getName = function () { return \"My script\" ; }; } var module = new Module (); this . onEnable = function () { moduleManager . registerModule ( module ); } this . onDisable = function () { moduleManager . unregisterModule ( module ); } Defining event callbacks Some events allow you to return an object to make changes to the event context. A full list of events can be found here function Module () { this . getName = function () { return \"My script\" ; }; this . onRender2D = function ( width , height , partialTicks ) { } this . onPreMotion = function ( posX , posY , posZ , yaw , pitch , onGround ) { return [ posX , posY , posZ , yaw , pitch , onGround ] } } Example scripts For some example scripts made by the beta testers, check out this page . Obviously, these don't show everything you can do with ZarScript but they will give you a general idea of what you can and can't make.","title":"Home"},{"location":"#overview","text":"An easy to use scripting API for Minecraft. Made by Zarzel and currently only in the beta builds of his client: astolfo.lgbt . If you don't already understand how Minecraft works, I suggest you look through MCP a little bit first so you can understand the structure of ZarScript.","title":"Overview"},{"location":"#script-structure","text":"All scripts must have 2 global variables named 'scriptName' and 'scriptDescription. Your modules are defined as functions and you must register and unregister an instance of them in 'onEnable' and 'onDisable'. All modules must have the function 'getName'. var scriptName = \"My Script\" ; var scriptDescription = \"Some description here\" ; function Module () { this . getName = function () { return \"My script\" ; }; } var module = new Module (); this . onEnable = function () { moduleManager . registerModule ( module ); } this . onDisable = function () { moduleManager . unregisterModule ( module ); }","title":"Script structure"},{"location":"#defining-event-callbacks","text":"Some events allow you to return an object to make changes to the event context. A full list of events can be found here function Module () { this . getName = function () { return \"My script\" ; }; this . onRender2D = function ( width , height , partialTicks ) { } this . onPreMotion = function ( posX , posY , posZ , yaw , pitch , onGround ) { return [ posX , posY , posZ , yaw , pitch , onGround ] } }","title":"Defining event callbacks"},{"location":"#example-scripts","text":"For some example scripts made by the beta testers, check out this page . Obviously, these don't show everything you can do with ZarScript but they will give you a general idea of what you can and can't make.","title":"Example scripts"},{"location":"events/","text":"onPlayerMove(x, y, z) Called when the local player is moved onPlayerCreate Called when the world is loaded onPreUpdate Called at the beginning of the local player update method onPostUpdate Called at the end of the local player update method onPreMotion(x, y, z, yaw, pitch, onGround) Called at the beginning of the local player update method. Use this pre event if you want to change what variables are networked to the server return [x, y, z, yaw, pitch, onGround] onSendPacket(id, data) Called when a packet is sent. Not all packets will contain data return [cancelled] onRender2D(width, height, partialTicks) Called when the in-game overlay is rendering onRender3D(partialTicks) Called when the world is rendering","title":"Events"},{"location":"events/#onplayermovex-y-z","text":"Called when the local player is moved","title":"onPlayerMove(x, y, z)"},{"location":"events/#onplayercreate","text":"Called when the world is loaded","title":"onPlayerCreate"},{"location":"events/#onpreupdate","text":"Called at the beginning of the local player update method","title":"onPreUpdate"},{"location":"events/#onpostupdate","text":"Called at the end of the local player update method","title":"onPostUpdate"},{"location":"events/#onpremotionx-y-z-yaw-pitch-onground","text":"Called at the beginning of the local player update method. Use this pre event if you want to change what variables are networked to the server return [x, y, z, yaw, pitch, onGround]","title":"onPreMotion(x, y, z, yaw, pitch, onGround)"},{"location":"events/#onsendpacketid-data","text":"Called when a packet is sent. Not all packets will contain data return [cancelled]","title":"onSendPacket(id, data)"},{"location":"events/#onrender2dwidth-height-partialticks","text":"Called when the in-game overlay is rendering","title":"onRender2D(width, height, partialTicks)"},{"location":"events/#onrender3dpartialticks","text":"Called when the world is rendering","title":"onRender3D(partialTicks)"},{"location":"examples/","text":"Example Scripts Chat spammer var scriptName = \"Chat Spammer\" ; var scriptDescription = \"Spams the chat with a pre-defined message.\" ; function ChatSpammer () { var message = \"u guys suck at this game lol\" ; var delayTicks = 40 ; this . getName = function () { return \"Chat Spammer\" ; }; this . onRender2D = function ( width , height , partialTicks ) { var ticksRemaining = localPlayer . getTicksExisted () % 40 ; render . drawString ( ticksRemaining , 2 , 15 , - 1 ); } this . onPreMotion = function ( posX , posY , posZ , yaw , pitch , onGround ) { if ( localPlayer . getTicksExisted () % delayTicks == 0 ) localPlayer . sendMessage ( message ); return [ posX , posY , posZ , yaw , pitch , onGround ] } } var spammerModule = new ChatSpammer (); this . onEnable = function () { moduleManager . registerModule ( spammerModule ); } this . onDisable = function () { moduleManager . unregisterModule ( spammerModule ); } Look notifier var scriptName = \"Look notifier\" ; var scriptDescription = \"Tells you whos looking at you.\" ; getAngleDistanceToPlayer = function ( localX , localY , localZ , id ) { var positions = world . getEntityPosition ( id ) var rotations = world . getEntityRotations ( id ) var x = localX - positions [ 0 ]; var y = localY - positions [ 1 ]; var z = localZ - positions [ 2 ]; var d1 = ( positions [ 1 ] + 1.62 ) - ( localY + 1.62 ); //hardcoded values var d3 = Math . sqrt ( x * x + z * z ); var f = (( Math . atan2 ( z , x ) * 180 ) / Math . PI ) - 90 ; var f1 = ( - (( Math . atan2 ( d1 , d3 ) * 180 ) / Math . PI )); return getAngleDistance ( f , rotations [ 1 ]) + getAngleDistance ( f1 , rotations [ 0 ]); }; getPercent = function ( angle ) { return ( 360 / angle ) * 4 ; } getAngleDistance = function ( a , b ){ var d = Math . abs ( a - b ) % 360 ; return ( d > 180 ? 360 - d : d ); } function ExampleModule () { var toDraw = \"Nobody\" ; this . getName = function () { return \"Look notifier\" ; }; this . onRender2D = function ( width , height , partialTicks ) { render . drawString ( toDraw , 150 , 50 , - 1 ) } this . onPreMotion = function ( posX , posY , posZ , yaw , pitch , onGround ) { var daEntities = world . getWorldEntities (); toDraw = \"\" var lowestAngle = 999 ; var entityName = \"\" ; var i ; for ( i = 0 ; i < daEntities . length ; i ++ ) { if ( world . isPlayer ( daEntities [ i ])) { var angleDist = getAngleDistanceToPlayer ( posX , posY , posZ , daEntities [ i ]); if ( angleDist < lowestAngle ) { lowestAngle = angleDist ; entityName = world . getEntityName ( daEntities [ i ]); } } } if ( lowestAngle < 30 && entityName != \"\" ) { toDraw = entityName + \" is looking at you!\" + Math . floor ( getPercent ( lowestAngle )) + \"%\" ; } return [ posX , posY , posZ , yaw , pitch , onGround ] } } var exampleModule = new ExampleModule (); this . onEnable = function () { moduleManager . registerModule ( exampleModule ); } this . onDisable = function () { moduleManager . unregisterModule ( exampleModule ); }","title":"Examples"},{"location":"examples/#example-scripts","text":"","title":"Example Scripts"},{"location":"examples/#chat-spammer","text":"var scriptName = \"Chat Spammer\" ; var scriptDescription = \"Spams the chat with a pre-defined message.\" ; function ChatSpammer () { var message = \"u guys suck at this game lol\" ; var delayTicks = 40 ; this . getName = function () { return \"Chat Spammer\" ; }; this . onRender2D = function ( width , height , partialTicks ) { var ticksRemaining = localPlayer . getTicksExisted () % 40 ; render . drawString ( ticksRemaining , 2 , 15 , - 1 ); } this . onPreMotion = function ( posX , posY , posZ , yaw , pitch , onGround ) { if ( localPlayer . getTicksExisted () % delayTicks == 0 ) localPlayer . sendMessage ( message ); return [ posX , posY , posZ , yaw , pitch , onGround ] } } var spammerModule = new ChatSpammer (); this . onEnable = function () { moduleManager . registerModule ( spammerModule ); } this . onDisable = function () { moduleManager . unregisterModule ( spammerModule ); }","title":"Chat spammer"},{"location":"examples/#look-notifier","text":"var scriptName = \"Look notifier\" ; var scriptDescription = \"Tells you whos looking at you.\" ; getAngleDistanceToPlayer = function ( localX , localY , localZ , id ) { var positions = world . getEntityPosition ( id ) var rotations = world . getEntityRotations ( id ) var x = localX - positions [ 0 ]; var y = localY - positions [ 1 ]; var z = localZ - positions [ 2 ]; var d1 = ( positions [ 1 ] + 1.62 ) - ( localY + 1.62 ); //hardcoded values var d3 = Math . sqrt ( x * x + z * z ); var f = (( Math . atan2 ( z , x ) * 180 ) / Math . PI ) - 90 ; var f1 = ( - (( Math . atan2 ( d1 , d3 ) * 180 ) / Math . PI )); return getAngleDistance ( f , rotations [ 1 ]) + getAngleDistance ( f1 , rotations [ 0 ]); }; getPercent = function ( angle ) { return ( 360 / angle ) * 4 ; } getAngleDistance = function ( a , b ){ var d = Math . abs ( a - b ) % 360 ; return ( d > 180 ? 360 - d : d ); } function ExampleModule () { var toDraw = \"Nobody\" ; this . getName = function () { return \"Look notifier\" ; }; this . onRender2D = function ( width , height , partialTicks ) { render . drawString ( toDraw , 150 , 50 , - 1 ) } this . onPreMotion = function ( posX , posY , posZ , yaw , pitch , onGround ) { var daEntities = world . getWorldEntities (); toDraw = \"\" var lowestAngle = 999 ; var entityName = \"\" ; var i ; for ( i = 0 ; i < daEntities . length ; i ++ ) { if ( world . isPlayer ( daEntities [ i ])) { var angleDist = getAngleDistanceToPlayer ( posX , posY , posZ , daEntities [ i ]); if ( angleDist < lowestAngle ) { lowestAngle = angleDist ; entityName = world . getEntityName ( daEntities [ i ]); } } } if ( lowestAngle < 30 && entityName != \"\" ) { toDraw = entityName + \" is looking at you!\" + Math . floor ( getPercent ( lowestAngle )) + \"%\" ; } return [ posX , posY , posZ , yaw , pitch , onGround ] } } var exampleModule = new ExampleModule (); this . onEnable = function () { moduleManager . registerModule ( exampleModule ); } this . onDisable = function () { moduleManager . unregisterModule ( exampleModule ); }","title":"Look notifier"},{"location":"localplayer/","text":"Prefix localPlayer.* Functions getPosX() Returns the players x coordinate getPosY() Returns the players y coordinate getPosZ() Returns the players z coordinate setPosX(x) Sets the players x coordinate setPosY(y) Sets the players y coordinate setPosZ(z) Sets the players z coordinate setPosition(x, y, z) Sets the players x, y and z coordinates setMotionX(x) Sets the players motion on the x axis setMotionY(y) Sets the players motion on the y axis setMotionZ(z) Sets the players motion on the z axis setSpeed(speed) Sets the players speed jump() Makes the player jump getMoveForward() Returns the players forward move value getMoveStrafing() Returns the players sideways move value isOnGround() Returns whether or not the player is on the ground isOnLadder() Returns whether or not the player is climbing a ladder or vines getYaw() Returns the players rotation yaw getPitch() Returns the players rotation pitch setYaw(yaw) Sets the players rotation yaw setPitch(pitch) Sets the players rotationPitch getTicksExisted() Returns the amount of ticks the player entity has existed sendMessage(message) Sends a message as the player getHurtTime() Returns the players hurt ticks getKillAuraTarget() Returns the current kill aura target. -1 if null getHotbarSlot() Returns the players active hotbar slot setHotbarSlot(slot) Sets the players active hotbar slot isUsingItem() Returns whether or not the player is using their held item sendPacket(id, data) Sends a packet to the server. For more information on how packets work, check out this","title":"Local Player"},{"location":"localplayer/#prefix","text":"localPlayer.*","title":"Prefix"},{"location":"localplayer/#functions","text":"","title":"Functions"},{"location":"localplayer/#getposx","text":"Returns the players x coordinate","title":"getPosX()"},{"location":"localplayer/#getposy","text":"Returns the players y coordinate","title":"getPosY()"},{"location":"localplayer/#getposz","text":"Returns the players z coordinate","title":"getPosZ()"},{"location":"localplayer/#setposxx","text":"Sets the players x coordinate","title":"setPosX(x)"},{"location":"localplayer/#setposyy","text":"Sets the players y coordinate","title":"setPosY(y)"},{"location":"localplayer/#setposzz","text":"Sets the players z coordinate","title":"setPosZ(z)"},{"location":"localplayer/#setpositionx-y-z","text":"Sets the players x, y and z coordinates","title":"setPosition(x, y, z)"},{"location":"localplayer/#setmotionxx","text":"Sets the players motion on the x axis","title":"setMotionX(x)"},{"location":"localplayer/#setmotionyy","text":"Sets the players motion on the y axis","title":"setMotionY(y)"},{"location":"localplayer/#setmotionzz","text":"Sets the players motion on the z axis","title":"setMotionZ(z)"},{"location":"localplayer/#setspeedspeed","text":"Sets the players speed","title":"setSpeed(speed)"},{"location":"localplayer/#jump","text":"Makes the player jump","title":"jump()"},{"location":"localplayer/#getmoveforward","text":"Returns the players forward move value","title":"getMoveForward()"},{"location":"localplayer/#getmovestrafing","text":"Returns the players sideways move value","title":"getMoveStrafing()"},{"location":"localplayer/#isonground","text":"Returns whether or not the player is on the ground","title":"isOnGround()"},{"location":"localplayer/#isonladder","text":"Returns whether or not the player is climbing a ladder or vines","title":"isOnLadder()"},{"location":"localplayer/#getyaw","text":"Returns the players rotation yaw","title":"getYaw()"},{"location":"localplayer/#getpitch","text":"Returns the players rotation pitch","title":"getPitch()"},{"location":"localplayer/#setyawyaw","text":"Sets the players rotation yaw","title":"setYaw(yaw)"},{"location":"localplayer/#setpitchpitch","text":"Sets the players rotationPitch","title":"setPitch(pitch)"},{"location":"localplayer/#getticksexisted","text":"Returns the amount of ticks the player entity has existed","title":"getTicksExisted()"},{"location":"localplayer/#sendmessagemessage","text":"Sends a message as the player","title":"sendMessage(message)"},{"location":"localplayer/#gethurttime","text":"Returns the players hurt ticks","title":"getHurtTime()"},{"location":"localplayer/#getkillauratarget","text":"Returns the current kill aura target. -1 if null","title":"getKillAuraTarget()"},{"location":"localplayer/#gethotbarslot","text":"Returns the players active hotbar slot","title":"getHotbarSlot()"},{"location":"localplayer/#sethotbarslotslot","text":"Sets the players active hotbar slot","title":"setHotbarSlot(slot)"},{"location":"localplayer/#isusingitem","text":"Returns whether or not the player is using their held item","title":"isUsingItem()"},{"location":"localplayer/#sendpacketid-data","text":"Sends a packet to the server. For more information on how packets work, check out this","title":"sendPacket(id, data)"},{"location":"modules/","text":"Prefix moduleManager.* Functions registerModule(instance) Registers a module and adds it to the gui. unregisterModule(instance) Unregisters a module and removes it from the gui. registerBoolean(moduleName, optionName, description, defaultValue) Registers a boolean option to the specified module moduleName - Name of the module it will be registered to (must be a script-added module) optionName - Name of the boolean option description - A short explanation of what this option does defaultValue - True/false getBoolean(optionName) Returns the value of the specified boolean option. Only works for booleans registered by scripts isModuleActive(moduleName) Returns the state of the specified module","title":"Module Manager"},{"location":"modules/#prefix","text":"moduleManager.*","title":"Prefix"},{"location":"modules/#functions","text":"","title":"Functions"},{"location":"modules/#registermoduleinstance","text":"Registers a module and adds it to the gui.","title":"registerModule(instance)"},{"location":"modules/#unregistermoduleinstance","text":"Unregisters a module and removes it from the gui.","title":"unregisterModule(instance)"},{"location":"modules/#registerbooleanmodulename-optionname-description-defaultvalue","text":"Registers a boolean option to the specified module moduleName - Name of the module it will be registered to (must be a script-added module) optionName - Name of the boolean option description - A short explanation of what this option does defaultValue - True/false","title":"registerBoolean(moduleName, optionName, description, defaultValue)"},{"location":"modules/#getbooleanoptionname","text":"Returns the value of the specified boolean option. Only works for booleans registered by scripts","title":"getBoolean(optionName)"},{"location":"modules/#ismoduleactivemodulename","text":"Returns the state of the specified module","title":"isModuleActive(moduleName)"},{"location":"packets/","text":"All packets can be caught with the sendPacket event, but only some of them can be sent using the localPlayer . sendPacket(id, data) function. Sendable packets PacketPlayer , PacketSwing , PacketEntityAction , Packets PacketPlayer Id : 9 Data : - onGround - yaw - pitch - x - y - z Possible data combinations : - onGround - x , y , z , onGround - yaw , pitch , onGround - x , y , z , yaw , pitch , onGround PacketEntityAction Id : 1 Data : - action : - START_SNEAKING ( 0 ) - STOP_SNEAKING ( 1 ) - START_SPRINTING ( 3 ) - STOP_SPRINTING ( 4 ) - RIDING_JUMP ( 5 ) - OPEN_INVENTORY ( 6 ) PacketSwing Id : 0 PacketUseEntity Id : 8 PacketChatMessage Id : 7 Data : - message","title":"Packets"},{"location":"packets/#sendable-packets","text":"PacketPlayer , PacketSwing , PacketEntityAction ,","title":"Sendable packets"},{"location":"packets/#packets","text":"","title":"Packets"},{"location":"packets/#packetplayer","text":"Id : 9 Data : - onGround - yaw - pitch - x - y - z Possible data combinations : - onGround - x , y , z , onGround - yaw , pitch , onGround - x , y , z , yaw , pitch , onGround","title":"PacketPlayer"},{"location":"packets/#packetentityaction","text":"Id : 1 Data : - action : - START_SNEAKING ( 0 ) - STOP_SNEAKING ( 1 ) - START_SPRINTING ( 3 ) - STOP_SPRINTING ( 4 ) - RIDING_JUMP ( 5 ) - OPEN_INVENTORY ( 6 )","title":"PacketEntityAction"},{"location":"packets/#packetswing","text":"Id : 0","title":"PacketSwing"},{"location":"packets/#packetuseentity","text":"Id : 8","title":"PacketUseEntity"},{"location":"packets/#packetchatmessage","text":"Id : 7 Data : - message","title":"PacketChatMessage"},{"location":"render/","text":"Prefix render.* Functions drawRect(x, y, x1, y1, hexColor) Draws a rectangle on the screen drawString(text, x, y, hexColor) Draws text on the screen","title":"Render"},{"location":"render/#prefix","text":"render.*","title":"Prefix"},{"location":"render/#functions","text":"","title":"Functions"},{"location":"render/#drawrectx-y-x1-y1-hexcolor","text":"Draws a rectangle on the screen","title":"drawRect(x, y, x1, y1, hexColor)"},{"location":"render/#drawstringtext-x-y-hexcolor","text":"Draws text on the screen","title":"drawString(text, x, y, hexColor)"},{"location":"world/","text":"Prefix world.* Examples Loop through entity list let entities = world . getWorldEntites (); for ( var i = 0 ; i < entities . length ; i ++ ) { let entityId = entities [ index ]; //Use functions documented below } Functions getWorldEntities() Updates all entities and returns their ID's getEntityHurtTime(id) Returns the hurt time of an entity getEntityBoundingBox(id) Returns the bounding box of an entity Return type is a double array which contains (in order) minX, minY, minZ, maxX, maxY, maxZ getEntityPosition(id) Returns the position of an entity Return type is a double array which contains (in order) x, y, z getEntityRotations(id) Returns the pitch and yaw of an entity Return type is a double array which contains (in order) yaw, pitch getEntityDisplayName Returns the display name of an entity getEntityName() Returns the name of an entity isPlayer() Returns whether or not an entity is a player getEntityHeldItemName() Returns the name of an entities held item setTimer(timer) Sets the game timer speed","title":"World"},{"location":"world/#prefix","text":"world.*","title":"Prefix"},{"location":"world/#examples","text":"","title":"Examples"},{"location":"world/#loop-through-entity-list","text":"let entities = world . getWorldEntites (); for ( var i = 0 ; i < entities . length ; i ++ ) { let entityId = entities [ index ]; //Use functions documented below }","title":"Loop through entity list"},{"location":"world/#functions","text":"","title":"Functions"},{"location":"world/#getworldentities","text":"Updates all entities and returns their ID's","title":"getWorldEntities()"},{"location":"world/#getentityhurttimeid","text":"Returns the hurt time of an entity","title":"getEntityHurtTime(id)"},{"location":"world/#getentityboundingboxid","text":"Returns the bounding box of an entity Return type is a double array which contains (in order) minX, minY, minZ, maxX, maxY, maxZ","title":"getEntityBoundingBox(id)"},{"location":"world/#getentitypositionid","text":"Returns the position of an entity Return type is a double array which contains (in order) x, y, z","title":"getEntityPosition(id)"},{"location":"world/#getentityrotationsid","text":"Returns the pitch and yaw of an entity Return type is a double array which contains (in order) yaw, pitch","title":"getEntityRotations(id)"},{"location":"world/#getentitydisplayname","text":"Returns the display name of an entity","title":"getEntityDisplayName"},{"location":"world/#getentityname","text":"Returns the name of an entity","title":"getEntityName()"},{"location":"world/#isplayer","text":"Returns whether or not an entity is a player","title":"isPlayer()"},{"location":"world/#getentityhelditemname","text":"Returns the name of an entities held item","title":"getEntityHeldItemName()"},{"location":"world/#settimertimer","text":"Sets the game timer speed","title":"setTimer(timer)"}]}